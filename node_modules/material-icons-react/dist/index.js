(function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define(['exports', './palette', 'react', 'prop-types', './config/mappings', './index.css'], factory);
    } else if (typeof exports !== "undefined") {
        factory(exports, require('./palette'), require('react'), require('prop-types'), require('./config/mappings'), require('./index.css'));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, global.palette, global.react, global.propTypes, global.mappings, global.index);
        global.index = mod.exports;
    }
})(this, function (exports, _palette, _react, _propTypes, _mappings) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    Object.keys(_palette).forEach(function (key) {
        if (key === "default" || key === "__esModule") return;
        Object.defineProperty(exports, key, {
            enumerable: true,
            get: function () {
                return _palette[key];
            }
        });
    });

    var _react2 = _interopRequireDefault(_react);

    var _propTypes2 = _interopRequireDefault(_propTypes);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }

    var MaterialIcon = function MaterialIcon(_ref) {
        var icon = _ref.icon,
            size = _ref.size,
            invert = _ref.invert,
            inactive = _ref.inactive,
            color = _ref.color,
            style = _ref.style;

        var sizeMapped = _mappings.sizes[size] || parseInt(size) || _mappings.sizes['small'];
        var defaultColor = invert && 'invert' ? _mappings.light : _mappings.dark;
        var inactiveColor = inactive && 'inactive' ? _mappings.mdInactive : '';
        var propStyle = style || {};
        var styleOverride = Object.assign(propStyle, { color: color ? color : '', fontSize: sizeMapped });

        return _react2.default.createElement(
            'i',
            { className: 'material-icons ' + sizeMapped + ' ' + defaultColor + ' ' + inactiveColor, style: styleOverride },
            icon
        );
    };

    MaterialIcon.propTypes = {
        icon: _propTypes2.default.string.isRequired,
        size: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
        invert: _propTypes2.default.bool,
        inactive: _propTypes2.default.bool
    };

    exports.default = MaterialIcon;
});