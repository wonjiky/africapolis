import React, {Component} from "react";
import PropTypes from "prop-types";

import {assign} from "d3plus-common";

/**
    @class Viz
    @extends React.Component
    @desc Creates SVG paths and coordinate points based on an array of data. See [this example](https://d3plus.org/examples/d3plus-geomap/getting-started/) for help getting started using the geomap generator.
*/
var Viz = (function (Component) {
  function Viz () {
    Component.apply(this, arguments);
  }

  if ( Component ) Viz.__proto__ = Component;
  Viz.prototype = Object.create( Component && Component.prototype );
  Viz.prototype.constructor = Viz;

  Viz.prototype.componentDidMount = function componentDidMount () {
    var ref = this.props;
    var Constructor = ref.type;

    this.viz = new Constructor().select(this.container);
    this.renderViz.bind(this)();

  };

  /**
      @memberof Viz
      @desc Updates visualization config on component update.
      @private
  */
  Viz.prototype.componentDidUpdate = function componentDidUpdate (prevProps) {

    var globalConfig = this.context.d3plus || {};
    var ref = this.props;
    var config = ref.config;
    var forceUpdate = ref.forceUpdate;
    var c = assign({}, globalConfig, config);
    var c2 = assign({}, globalConfig, prevProps.config);

    var same = forceUpdate ? false : JSON.stringify(c) === JSON.stringify(c2);
    if (!same) { this.renderViz.bind(this)(); }

  };

  /**
      @memberof Viz
      @desc Sets visualization config, accounting for dataFormat, and renders the visualization.
      @private
  */
  Viz.prototype.renderViz = function renderViz () {
    var ref = this;
    var viz = ref.viz;
    var ref$1 = this.props;
    var config = ref$1.config;
    var dataFormat = ref$1.dataFormat;
    var globalConfig = this.context.d3plus || {};
    var c = assign({}, globalConfig, config);

    if (dataFormat && c.data) { viz.config(c).data(c.data, dataFormat); }
    else { viz.config(c); }
    viz.render();

  };

  /**
      @memberof Viz
      @desc Renders an empty container to hold the visualization.
      @private
  */
  Viz.prototype.render = function render () {
    var this$1 = this;

    var ref = this.props;
    var className = ref.className;
    return React.createElement( 'div', { className: className, ref: function (container) { return this$1.container = container; } });
  };

  return Viz;
}(Component));

Viz.contextTypes = {d3plus: PropTypes.object};
Viz.defaultProps = {
  className: "viz",
  forceUpdate: false
};

/**
    @memberof Viz
    @param {Object} [config = {}] An object containing method/value pairs to be passed to the visualization's .config( ) method.
    @param {Function} [dataFormat = d3plus.dataFold] A custom formatting function to be used when formatting data from an AJAX request. The function will be passed the raw data returned from the request, and is expected to return an array of values used for the data method.
*/
export default Viz;

//# sourceMappingURL=Viz.js.map